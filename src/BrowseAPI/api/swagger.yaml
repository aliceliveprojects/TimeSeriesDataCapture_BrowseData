---
swagger: "2.0"
info:
  description: ""
  version: "1.5.0"
  title: "TimeSeriesDataCapture"
  contact:
    name: "TimeSeriesDataCapture@gmail.com"
    email: "TimeSeriesDataCapture@gmail.com"
host: "timeseriesdatacapture-browse.herokuapp.com:443"
#host: "localhost:8000"
basePath: "/apis"
tags:
- name: "Browse API"
  description: "Getting and postings components from server"
schemes:
- "https"
#-"http"
paths:
  /components:
    get:
      tags:
      - "Browse API"
      summary: "Gets IDs available for import"
      description: "Gets all the component IDs available for import"
      operationId: "getComponentIDs"
      produces:
      - "application/json"
      parameters:
      - name: "folderID"
        in: "query"
        description: "Specifies a folder"
        required: false
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            description: "Array of component objects"
            items:
              type: "string"
              example: "component_id"
              description: "specific component ID"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
      security:
      - timeseries_admin_auth:
        - "admin"
      x-swagger-router-controller: "BrowseAPI"
    post:
      tags:
      - "Browse API"
      summary: "Posts component IDs for import"
      description: "Posts all the component IDs for import"
      operationId: "postComponentIDs"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "componentIDs"
        required: true
        schema:
          type: "array"
          description: "Array of components to be added"
          items:
            $ref: "#/definitions/componentIDs"
      responses:
        200:
          description: "Success"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
      security:
      - timeseries_admin_auth:
        - "admin"
      x-swagger-router-controller: "BrowseAPI"
  /components/{componentID}:
    get:
      tags:
      - "Browse API"
      summary: "Get a specific component"
      description: "Get a specific imported component by component ID from OneDrive"
      operationId: "getComponent"
      parameters:
      - name: "componentID"
        in: "path"
        description: "Component ID specifies a component"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/inline_response_200"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
      x-swagger-router-controller: "BrowseAPI"
    delete:
      tags:
      - "Browse API"
      summary: "Deletes a specific component"
      description: "Deletes a specific imported component by component ID"
      operationId: "deleteComponent"
      parameters:
      - name: "componentID"
        in: "path"
        description: "Component ID specifies a component"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
      security:
      - timeseries_admin_auth:
        - "admin"
      x-swagger-router-controller: "BrowseAPI"
  /components/{componentID}/preview:
    get:
      tags:
      - "Browse API"
      summary: "Get a specific component"
      description: "Get a specific imported component by component ID"
      operationId: "getComponentPreview"
      parameters:
      - name: "componentID"
        in: "path"
        description: "Component ID specifies a component"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/inline_response_200"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
      security:
      - timeseries_admin_auth:
        - "admin"
      x-swagger-router-controller: "BrowseAPI"
  /components/{componentID}/tags/:
    put:
      tags:
      - "Browse API"
      summary: "adds new tags to a specific component"
      description: "Sends tag IDs to be added to a specific component"
      operationId: "addComponentTags"
      parameters:
      - name: "componentID"
        in: "path"
        description: "Component ID specifies a component"
        required: true
        type: "string"
      - in: "body"
        name: "tags"
        required: true
        schema:
          type: "array"
          description: "Array of tags to be added"
          items:
            type: "string"
            example: "tag"
            description: "specific tag"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            description: "Array of tag ids"
            items:
              type: "string"
              example: "tag_id"
              description: "specific tag ID"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
      security:
      - timeseries_admin_auth:
        - "admin"
      x-swagger-router-controller: "BrowseAPI"
  /components/{componentID}/tags/{tagID}:
    delete:
      tags:
      - "Browse API"
      summary: "deletes tag from a specific component"
      description: "deletes a tag from a specific component"
      operationId: "deleteComponentTag"
      parameters:
      - name: "componentID"
        in: "path"
        description: "Component ID specifies a component"
        required: true
        type: "string"
      - name: "tagID"
        in: "path"
        description: "tag ID specifies a tag"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            type: "string"
            example: "tag_id"
            description: "specific tag ID"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
      security:
      - timeseries_admin_auth:
        - "admin"
      x-swagger-router-controller: "BrowseAPI"
  /components/{componentID}/annotations:
    post:
      tags:
      - "Browse API"
      summary: "adds new annotations tag"
      description: "adds new annotations tag for a specific component"
      operationId: "addComponentAnnotations"
      parameters:
      - name: "componentID"
        in: "path"
        description: "Component ID specifies a component"
        required: true
        type: "string"
      - in: "body"
        name: "annotations"
        required: true
        schema:
          type: "array"
          description: "Array of tags to be added"
          items:
            $ref: "#/definitions/annotations"
      responses:
        200:
          description: "Success"
          schema:
            type: "string"
            example: "annotation_id"
            description: "specific annotation ID"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
      security:
      - timeseries_admin_auth:
        - "admin"
      x-swagger-router-controller: "BrowseAPI"
  /components/{componentID}/annotations/{annotationID}:
    put:
      tags:
      - "Browse API"
      summary: "adds new annotations tag"
      description: "adds new annotations tag for a specific component"
      operationId: "updateComponentAnnotation"
      parameters:
      - name: "componentID"
        in: "path"
        description: "Component ID specifies a component"
        required: true
        type: "string"
      - name: "annotationID"
        in: "path"
        description: "Annotation ID specifies a annotation"
        required: true
        type: "string"
      - in: "body"
        name: "annotation"
        required: true
        schema:
          $ref: "#/definitions/annotation"
      responses:
        200:
          description: "Success"
          schema:
            type: "string"
            example: "annotation_id"
            description: "specific annotation ID"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
      security:
      - timeseries_admin_auth:
        - "admin"
      x-swagger-router-controller: "BrowseAPI"
    delete:
      tags:
      - "Browse API"
      summary: "Deletes a specific annotation"
      description: "Deletes a specific annotation by annotation ID"
      operationId: "deleteComponentAnnotation"
      parameters:
      - name: "componentID"
        in: "path"
        description: "Component ID specifies a component"
        required: true
        type: "string"
      - name: "annotationID"
        in: "path"
        description: "Annotation ID specifies a annotation"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            type: "string"
            example: "annotation_id"
            description: "specific annotation ID"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
      security:
      - timeseries_admin_auth:
        - "admin"
      x-swagger-router-controller: "BrowseAPI"
  /tags:
    get:
      tags:
      - "Browse API"
      summary: "Searches for componenets"
      description: "Searches database for components that match search string"
      operationId: "getTags"
      parameters:
      - name: "tags"
        in: "query"
        description: "tags to query"
        required: false
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            description: "Array of component objects"
            items:
              type: "string"
              example: "tag1,tag2"
              description: "specific component ID"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
      x-swagger-router-controller: "BrowseAPI"
  /search:
    get:
      tags:
      - "Browse API"
      summary: "Searches for componenets"
      description: "Searches database for components that match search parameters"
      operationId: "componentSearch"
      parameters:
      - name: "query"
        in: "query"
        description: "Component Tags"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "page number"
        required: false
        type: "integer"
      - name: "pagesize"
        in: "query"
        description: "page size (number of components)"
        required: false
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                componentID:
                  type: "string"
                  description: "Id of component"
                dateTimeStamp:
                  type: "integer"
                  description: "date and time stamp"
                tags:
                  type: "array"
                  items:
                    type: "string"
                  description: "array of component tags"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
      x-swagger-router-controller: "BrowseAPI"
  /authenticate:
    get:
      tags:
      - "Browse API"
      summary: "Gets file storage token"
      description: "Retrieves file storage token login into file storage"
      operationId: "getAuthenticate"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            type: "integer"
            example: "token"
            description: "File storage token"
        400:
          description: ""
      security:
      - timeseries_admin_auth:
        - "admin"
      x-swagger-router-controller: "BrowseAPI"
    post:
      tags:
      - "Browse API"
      summary: "Sends file storage auth token'"
      description: "Sends storage auth token"
      operationId: "postAuthenticate"
      parameters:
      - in: "body"
        name: "fileStorageToken"
        required: true
        schema:
          $ref: "#/definitions/fileStorageToken"
      responses:
        200:
          description: "Success"
        401:
          description: "Unauthorized"
      security:
      - timeseries_admin_auth:
        - "admin"
      x-swagger-router-controller: "BrowseAPI"
    delete:
      tags:
      - "Browse API"
      summary: "Removes file storage auth token'"
      description: "Removes storage auth token"
      operationId: "deleteAuthenticate"
      parameters:
      - in: "body"
        name: "profileID"
        required: true
        schema:
          type: "object"
          properties:
            profileID:
              type: "string"
              example: "sub|sdadasfdyf"
        description: "string description"
      responses:
        200:
          description: "Success"
        401:
          description: "Unauthorized"
      security:
      - timeseries_admin_auth:
        - "admin"
      x-swagger-router-controller: "BrowseAPI"
  /algorithms:
    get:
      tags:
      - "Browse API"
      summary: "Gets all algorithms"
      description: "Gets all algorithms for Rth Calculation from database"
      operationId: "getAlgorithms"
      produces:
      - "application/octet/stream"
     
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            description: "specific component with alogrithm"
            items:
              $ref: "#/definitions/inline_response_200_1"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
      security:
      - timeseries_admin_auth:
        - "admin"
      x-swagger-router-controller: "BrowseAPI"
  /export:
    get:
      tags:
      - "Browse API"
      summary: "Compresses all components"
      description: "Compresses all components run-data and annotations into a folder"
      operationId: "getExportComponents"
      produces:
      - "application/json"
      parameters:
      - name: "componentIds"
        in: "query"
        description: "Component ID specifies a component multiple components should be seperated by a comma"
        required: true
        type: "string"
      - name: "exportRequestId"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
      x-swagger-router-controller: "BrowseAPI"
  /exportProgress:
    get:
      tags:
        - "Browse API"
      summary: "Gets the progress and fileId of the given exportRequestId."
      operationId: "getExportProgress"
      description: "Goes off and checks the progress of the given exportRequest. If the export is complete, a `fileId` will be returned in the response body."
      produces:
      - "application/json"
      parameters:
      - name: "exportRequestId"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            type: "object"
            properties:
              progress:
                type: "string"
                description: "The export progress."
                example: "100%"
              fileId:
                type: "string"
                description: "The file ID, returned only when progress is complete."
        400:
          description: ""
      x-swagger-router-controller: "BrowseAPI"
  /reserveExport:
    post:
      tags:
      - "Browse API" 
      summary: "Prepares the server for an export and returns an exportRequestId (required to start the export.)"
      operationId: "postReserveExport"
      consumes:
      - "application/json"
      produces: 
      - "application/json"
      description: "This is the first interface that will be used to kick off the export process. Used to make preparations for a export reservation to be made. The returned `exportRequestId` should be noted as it is required in requesting an export."
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              exportRequestId:
                type: "string"
                description: "The export request ID."
        400:
          description: "Bad request"
        500:
          description: "Error 500"
      x-swagger-router-controller: "BrowseAPI"
  /palette/{paletteID}:
    get:
      tags:
      - "Browse API" 
      summary: "Retireves trend line palette"
      operationId: "getPalette"
      consumes:
      - "application/json"
      produces: 
      - "application/json"
      description: "Retrieves an array of colours from a mongoDB"
      parameters:
      - name: "paletteID"
        in: "path"
        description: "Specifies a palette"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              palette:
                type: "array"
                items:
                  type: "string"
                  example: "#55FF55"
                description: "Array of colours"
        400:
          description: "Bad request"
        500:
          description: "Error 500"
      x-swagger-router-controller: "BrowseAPI"
securityDefinitions:
  timeseries_admin_auth:
    type: "oauth2"
    authorizationUrl: "https://timeseriestest.eu.auth0.com/authorize"
    flow: "implicit"
    scopes:
      admin: "Full Access"
definitions:
  fileStorageToken:
    type: "object"
    properties:
      storageToken:
        type: "string"
        description: "token used to authorize storage"
      profileID:
        type: "string"
        description: "Id of the user logged in"
  component:
    properties:
      property:
        type: "string"
        description: "component property"
      value:
        type: "integer"
        description: "new value"
  inline_response_200:
    properties:
      id:
        type: "integer"
        description: "Run ID"
      Date&Timestamp:
        type: "integer"
        description: "Date and timestamp"
      TagCollection:
        type: "array"
        items:
          type: "string"
          example: "tag"
          description: "A tag"
      AnnotationCollection:
        type: "array"
        items:
          type: "string"
          example: "annotation"
          description: "A annotation"
      Data:
        $ref: "#/definitions/inline_response_200_Data"
    example:
      TagCollection:
      - "tag"
      AnnotationCollection:
      - "annotation"
      Date&Timestamp: 6
      Data:
        Column:
        - "data_point"
      id: 0
  inline_response_200_Data:
    properties:
      Column:
        type: "array"
        items:
          type: "integer"
          example: "data_point"
          description: "point of data"
    example:
      Column:
      - "data_point"
  componentIDs:
    properties:
      id:
        type: "string"
        example: "id"
        description: "id"
      algorithmID:
        type: "string"
        description: "alogrithm id"
    description: "specific component with alogrithm"
  annotations:
    properties:
      description:
        type: "string"
        example: "description"
        description: "string description"
      xcoordinate:
        type: "number"
        description: "x co-ordinate"
    description: "specific annotation"
  annotation:
    type: "object"
    properties:
      description:
        type: "string"
        example: "description"
        description: "string description"
      xcoordinate:
        type: "number"
        description: "x co-ordinate"
    description: "specific annotation"
  inline_response_200_1:
    properties:
      algorithmID:
        type: "string"
        description: "alogrithm id"
      algorithmDescription:
        type: "string"
        example: "algorithm description"
        description: "algorithm description"
    example:
      algorithmDescription: "algorithm description"
      algorithmID: "algorithmID"
  ReserveArg:
    type: "object"
    required:
    - "secret"
    properties:
      secret:
        type: "string"
        description: "the secret used to encrypt the final output file"
    description: "contains information with which to create the exported file"
